using UnityEngine;
using System.Collections;
using UnityEditor;
using UnityEditor.SceneManagement;

public class AreaEditor : EditorWindow
{
    static AreaEditor m_CurrentWindow = null;
    static int m_CurrentWindowHandle = 0;
    private string m_CurrentSceneName = string.Empty;
    private AreaGridComponent m_AreaGrid;

    private bool m_LeftMouseDown = false; 

    // 当前笔刷类型
    private AreaGridType m_CurrentBrushType = AreaGridType.None;
    // 当前笔刷状态
    private UserBrushState m_CurrentBrushState = UserBrushState.AddBlcok;
    // 笔刷大小
    private float m_BrushSize = 1f;
    
    [MenuItem("Window/地形区域")]
    static void ShowWindow()
    {
        if (m_CurrentWindowHandle != 0)
            return;

        m_CurrentWindow = GetWindow<AreaEditor>("AreaEditor");
        m_CurrentWindow.minSize = new Vector2(800, 400);
        m_CurrentWindowHandle = m_CurrentWindow.GetInstanceID();
        m_CurrentWindow.Initialize();
    }

    /// <summary>
    /// 初始化
    /// </summary>
    private void Initialize()
    {
        m_AreaGrid = null;
        CreateAreaGrid();
        SceneView.onSceneGUIDelegate += OnSceneGUI;
    }

    private void Uninitialize()
    {
        SceneView.onSceneGUIDelegate -= OnSceneGUI;
    }
    
    private void OnDestroy()
    {
        Uninitialize();
        m_CurrentWindowHandle = 0;
    }

    private void OnGUI()
    {
        m_CurrentSceneName = EditorSceneManager.GetActiveScene().name;
        GUILayout.Label(string.Format("当前游戏场景名称：{0}", m_CurrentSceneName));

        // 不同区域类型选择
        EditorGUILayout.BeginHorizontal("box");
        GUILayout.Label("地形区域类型： ");

        GUI.color = m_AreaGrid.areaGridColor[(int)AreaGridType.None];
        if(GUILayout.Toggle(m_CurrentBrushType == AreaGridType.None, "无"))
        {
            m_CurrentBrushType = AreaGridType.None;
        }
        GUI.color = m_AreaGrid.areaGridColor[(int)AreaGridType.Sand];
        if (GUILayout.Toggle(m_CurrentBrushType == AreaGridType.Sand, "沙地"))
        {
            m_CurrentBrushType = AreaGridType.Sand;
        }
        GUI.color = m_AreaGrid.areaGridColor[(int)AreaGridType.Grass];
        if (GUILayout.Toggle(m_CurrentBrushType == AreaGridType.Grass, "草地"))
        {
            m_CurrentBrushType = AreaGridType.Grass;
        }
        GUI.color = m_AreaGrid.areaGridColor[(int)AreaGridType.House];
        if (GUILayout.Toggle(m_CurrentBrushType == AreaGridType.House, "房子"))
        {
            m_CurrentBrushType = AreaGridType.House;
        }
        GUI.color = m_AreaGrid.areaGridColor[(int)AreaGridType.Snow];
        if (GUILayout.Toggle(m_CurrentBrushType == AreaGridType.Snow, "雪地"))
        {
            m_CurrentBrushType = AreaGridType.Snow;
        }
        EditorGUILayout.EndHorizontal();
        
         EditorGUILayout.BeginHorizontal("box");
        if(GUILayout.Button("重新烘焙高度信息"))
        {
            BakeHeightMap();
        }
        if(GUILayout.Button("清理所有区域类型信息"))
        {
            ClearAreaGridType();
        }
        EditorGUILayout.EndHorizontal();
    }
    
    private void OnSceneGUI(SceneView sceneView)
    {
        int controlID = GUIUtility.GetControlID(FocusType.Passive);
        Event current = Event.current;
        switch(current.type)
        {
            case EventType.MouseUp:
                if (current.isMouse && current.button == 0)
                    m_LeftMouseDown = false;
                break;
            case EventType.MouseDown:
                if (current.isMouse && current.button == 0)
                    m_LeftMouseDown = true;
                OnPen(current);
                break;
            case EventType.MouseDrag:
                OnPen(current);
                break;
                case EventType.MouseMove:
                HandleUtility.Repaint();
                break;
            // 重绘笔刷
            case EventType.Repaint:
                DrawHandle();
                break;
            // 编辑模式下禁止选中物体
            case EventType.Layout:
                HandleUtility.AddDefaultControl(controlID);
                break;
        }
    }
    
    void OnPen(Event current)
    {
        if(m_LeftMouseDown)
        {
            // 设置笔刷类型
            if(!current.shift && !current.control)
            {
                m_CurrentBrushState = UserBrushState.AddBlcok;
            }
            else if(current.control)
            {
                m_CurrentBrushState = UserBrushState.RemoveBlock;
            }
            else if(current.shift)
            {
                m_CurrentBrushState = UserBrushState.None;
            }
            BrushGridInsideArea();
            HandleUtility.Repaint();
        }
    }
    
    /// <summary>
    /// 绘制笔刷
    /// </summary>
    void DrawHandle()
    {
        RaycastHit hit;
        Ray ray = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);
        if(Physics.Raycast(ray, out hit, float.MaxValue))
        {
            Handles.color = Color.red;
            Handles.DrawWireDisc(hit.point, hit.normal, m_BrushSize);
        }
    }
    
    void BrushGridInsideArea()
    {
        RaycastHit hit;
        Ray ray = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);
        
        if(Physics.Raycast(ray, out hit, float.MaxValue))
        {
            if(m_BrushSize < 0.3f)
            {
                // TODO: the origin is not zero, how to handle it 
                int c = (int)(hit.point.x / m_AreaGrid.cellSize);
                int r = (int)(hit.point.z / m_AreaGrid.cellSize);
                UpdateAreaGridType(c, r);
            }
            else
            {

            }
        }
    }
    
    /// <summary>
    /// 更新区域网格类型信息
    /// </summary>
    void UpdateAreaGridType(int column, int row)
    {
        if (column < 0 || column >= m_AreaGrid.numberOfColumn)
            return;
        if (row < 0 || row >= m_AreaGrid.numberOfRow)
            return;

        switch(m_CurrentBrushState)
        {
            case UserBrushState.None:
                break;
            case UserBrushState.AddBlcok:
                m_AreaGrid.mergedAreaType[row * m_AreaGrid.numberOfColumn + column] = m_CurrentBrushType;
                break;
            case UserBrushState.RemoveBlock:
                m_AreaGrid.mergedAreaType[row * m_AreaGrid.numberOfColumn + column] = AreaGridType.None;
                break;
        }
    }
    
    // 清理区域网格类型信息
    void ClearAreaGridType()
    {
        int length = m_AreaGrid.mergedAreaType.Length;
        for(int i = 0; i < length; ++i)
        {
            m_AreaGrid.mergedAreaType[i] = AreaGridType.None;
        }
    }
    
    private void CreateAreaGrid()
    {
        GameObject areaGrid = GameObject.Find("[AreaGrid]");
        if (areaGrid == null)
        {
            areaGrid = new GameObject("[AreaGrid]");
            areaGrid.transform.position = Vector3.zero;
            areaGrid.transform.rotation = Quaternion.identity;
            m_AreaGrid = areaGrid.AddComponent<AreaGridComponent>();
        }
        else
        {
            m_AreaGrid = areaGrid.GetComponent<AreaGridComponent>();
        }
    }
    
    void SetAreaInfo()
    {
        // TODO: when areaMesh is Null
        Mesh areaMesh = GameObject.FindWithTag("Floor").GetComponent<MeshFilter>().sharedMesh;
        float entireAreaWidth = areaMesh.bounds.size.x;
        float entireAreaLength = areaMesh.bounds.size.z;
        Vector3 areaCenter = areaMesh.bounds.center;

        m_AreaGrid.numberOfRow = (int)Mathf.Round(entireAreaLength);
        m_AreaGrid.numberOfColumn = (int)Mathf.Round(entireAreaWidth);
        m_AreaGrid.areaOrigin = new Vector3(areaCenter.x - entireAreaWidth / 2f, 0, areaCenter.z - entireAreaLength / 2f);
        m_AreaGrid.mergedAreaType = new AreaGridType[m_AreaGrid.numberOfRow * m_AreaGrid.numberOfColumn];
        m_AreaGrid.heightMap = new float[m_AreaGrid.numberOfRow * m_AreaGrid.numberOfColumn];
    }
    
    /// <summary>
    /// 烘焙高度信息
    /// </summary>
    void BakeHeightMap()
    {
        Ray ray = new Ray();
        ray.direction = Vector3.down;
        Vector3 rayStart = new Vector3();
        rayStart.y = m_AreaGrid.transform.position.y + 1000f;

        RaycastHit hit;
        for(int i = 0; i < m_AreaGrid.numberOfRow; ++i)
        {
            rayStart.x = m_AreaGrid.areaOrigin.x + i;
            for (int j = 0; j < m_AreaGrid.numberOfColumn; ++j)
            {
                rayStart.z = m_AreaGrid.areaOrigin.z + j;
                ray.origin = rayStart;
                if(Physics.Raycast(ray, out hit, float.MaxValue))
                {
                    m_AreaGrid.heightMap[i * m_AreaGrid.numberOfColumn + j] = hit.point.y;
                }
            }
        }
    }
}
