Shader "Customay"
{
	Properties
	{
		_MainTex ("Base (RGB)", 2D) = "white"{}
		_RayColor("Ray Color", Color) = (1, 1, 1, 1)
	}

	SubShader
	{
		Tags {"LightMode" = "ForwardBase"}

		Pass
		{
			Tags {"Queue" = "Transparent" "RenderType" = "Transparent" "IgnoreProjector" = "True"}

			ZWrite Off
			ZTest Greater
			Blend One OneMinusSrcAlpha

			CGPROGRAM

			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#pragma vertex vert
			#pragma fragment frag

			fixed4 _RayColor;			

			struct a2v {
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 texcoord : TEXCOORD0;
			};

			struct v2f {
				float4 pos : SV_POSITION;
				float3 worldNormal : TEXCOORD0;
				float3 worldView : TEXCOORD1;
				float2 uv : TEXCOORD2;
			};
      
      v2f vert(a2v v)
			{
				v2f o;

				o.pos = UnityObjectToClipPos(v.vertex);
				o.worldNormal = UnityObjectToWorldNormal(v.normal);
				o.worldView = normalize(WorldSpaceViewDir(v.vertex));
				o.uv = v.texcoord;

				return o;
			}

			fixed4 frag(v2f i) : SV_TARGET
			{
				fixed3 worldNormal = normalize(i.worldNormal);
				fixed3 worldView = normalize(i.worldView);
				fixed NdotV = 1.0 - max(0, dot(worldNormal, worldView) * 1.5);

				return _RayColor * NdotV;
			}

			ENDCG
		}
    Pass
		{
			Tags {"RenderType" = "Opaque"}

			ZTest LEqual
			ZWrite On

			CGPROGRAM

			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#pragma vertex vert
			#pragma fragment frag

			sampler2D _MainTex;
			float4 _MainTex_ST;

			struct a2v {
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 texcoord : TEXCOORD0;
			};

			struct v2f {
				float4 pos : SV_POSITION;
				float3 worldNormal : TEXCOORD0;
				float3 worldPos : TEXCOORD1;
				float2 uv : TEXCOORD2;
			};


v2f vert(a2v v)
			{
				v2f o;

				o.pos = UnityObjectToClipPos(v.vertex);
				o.worldNormal = UnityObjectToWorldNormal(v.normal);
				o.worldPos = mul(unity_ObjectToWorld, v.vertex);
				o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);

				return o;
			}

			fixed4 frag(v2f i) : SV_TARGET
			{
				fixed3 worldNormal = normalize(i.worldNormal);

				fixed3 albedo = tex2D(_MainTex, i.uv).rgb;
				fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo;

				fixed3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));
				fixed3 diffuse = _LightColor0.rgb * albedo * max(0.0, dot(worldNormal, lightDir));

				return fixed4(ambient + diffuse, 1.0);
			}
				 
			ENDCG
		}
	}
	FallBack "Diffuse"
}Â 
    
