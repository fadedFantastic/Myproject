Shader "Custom/Basic Rim"
{
	Properties{
		_Color ("Color Tint", Color) = (1, 1, 1, 1)
		_MainTex ("Main Tex", 2D) = "white"{}
		_RimColor ("Rim Color", Color) = (1, 1, 1, 1)
		_RimPower ("Rim Power", Range(0.0, 36)) = 0.1
		_RimIntensity ("Rim Intensity", Range(0.0, 100)) = 3
	}

	SubShader
	{
		Tags {"Queue" = "Geometry"  "RenderType" = "Opaque"}

		Pass
		{
			Tags {"LightMode" = "ForwardBase"}

			CGPROGRAM

			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "AutoLight.cginc"

			#pragma vertex vert
			#pragma fragment frag
      
      fixed4 _Color;
			sampler2D _MainTex;
			float4 _MainTex_ST;
			fixed4 _RimColor;
			float _RimPower;
			float _RimIntensity;

			struct a2v
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 texcoord : TEXCOORD0;
			};

			struct v2f
			{
				float4 pos : SV_POSITION;
				float4 uv : TEXCOORD0;
				float3 worldNormal : TEXCOORD1;
				float4 worldPos : TEXCOORD2;
				SHADOW_COORDS(3)
			};

			v2f vert(a2v v)
			{
				v2f o;
				o.pos = UnityObjectToClipPos(v.vertex);
				o.uv.xy = TRANSFORM_TEX(v.texcoord, _MainTex);
				o.worldNormal = UnityObjectToWorldNormal(v.normal);
				o.worldPos = mul(unity_ObjectToWorld, v.vertex);
				
				TRANSFER_SHADOW(o);

				return o;
			}
      
      fixed4 frag(v2f i) : SV_TARGET
			{
				fixed3 worldNormal = normalize(i.worldNormal);
				fixed3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));
				fixed3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));

				fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _Color.rgb;

				fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo;

				fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(lightDir, worldNormal));

				half rim = 1.0 - max(0.0, dot(viewDir, worldNormal));
				float3 emissive = _RimColor.rgb * pow(rim, _RimPower) * _RimIntensity;

				UNITY_LIGHT_ATTENUATION(atten, i, worldPos);

				return fixed4(ambient + diffuse * atten + emissive, 1.0);
			}
			ENDCG
		}
	}
	FallBack "Diffuse"
}

